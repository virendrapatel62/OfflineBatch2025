// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")  // You can change the filename if needed //
}

enum Role {
  SELLER
  USER
}


model User {
  id        Int     @id @default(autoincrement())
  name      String? @map("name")
  email     String  @unique @map("email")
  password  String  @map("password")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  role      Role @default(USER) @map("role")
  isActive  Boolean @default(true) @map("is_active")

  products Product[] @relation("products")
  orders Order[] @relation("orders")
}


model Product {
  id        Int     @id @default(autoincrement())
  name      String  @map("name")
  description String? @map("description")

  price     Int     @map("price")
  discount  Int?    @map("discount")
  unit      String?  @map("unit")

  category  String?  @map("category")
  isActive  Boolean @default(true) @map("is_active")
  images    String[] @map("images")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user      User?    @relation("products", fields: [userId], references: [id])
  userId    Int?     @unique @map("user_id")

  orderItems OrderItem[]
}



enum OrderStatus {
  PENDING
  DELIVERED
  CANCELLED
  RETURNED
}

model Order {
  id        Int     @id @default(autoincrement())

  userId    Int     @map("user_id")
  total     Int     @map("total")

  address   String? @map("address")
  phone     String? @map("phone")

  status    OrderStatus  @default(PENDING) @map("status")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  items OrderItem[]

  user User @relation("orders", fields: [userId], references: [id])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int     @map("order_id")
  productId Int     @map("product_id")
  quantity  Int     @map("quantity")
  unitPrice Int     @map("unit_price")
  total     Int     @map("total")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  order   Order @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}